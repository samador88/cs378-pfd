        -:    0:Source:PFD.c++
        -:    0:Graph:PFD.gcno
        -:    0:Data:PFD.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:// --------
        -:    2:// includes
        -:    3:// --------
        -:    4:
        -:    5:#include <cassert>  // assert
        -:    6:#include <iostream> // endl, istream, ostream
        -:    7:#include <sstream>  // istringstream
        -:    8:#include <string>   // getline, string
        -:    9:#include <utility>  // make_pair, pair
        -:   10:#include <vector>   //resize
        -:   11:#include <list>
        -:   12:#include <queue>
        -:   13:#include "PFD.h"
        -:   14:
        -:   15:using namespace std;
        -:   16:
        1:   17:vector<int> tasks(12); //contains number of dependencies left for job i
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
call    5 returned 100%
call    6 never executed
call    7 never executed
        1:   18:vector<list<int>> adjacency_list = {{},{},{},{},{},{}}; //empty lists for test harness
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
call    7 returned 100%
branch  8 taken 100% (fallthrough)
branch  9 taken 0% (throw)
call   10 returned 100%
branch 11 taken 100% (fallthrough)
branch 12 taken 0% (throw)
call   13 returned 100%
branch 14 taken 100% (fallthrough)
branch 15 taken 0% (throw)
call   16 returned 100%
branch 17 taken 100% (fallthrough)
branch 18 taken 0% (throw)
call   19 returned 100%
branch 20 taken 100% (fallthrough)
branch 21 taken 0% (throw)
branch 22 taken 86% (fallthrough)
branch 23 taken 14%
call   24 returned 100%
call   25 returned 100%
call   26 returned 100%
branch 27 never executed
branch 28 never executed
call   29 never executed
call   30 never executed
call   31 never executed
        1:   19:priority_queue<int, vector<int>, greater<int>> pri_q; //min priority queue
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
call    5 returned 100%
call    6 never executed
        -:   20:// ------------
        -:   21:// pfd_read_first
        -:   22:// ------------
        -:   23:
        -:   24:/* Takes in first string
        -:   25:   Sets up data structures
        -:   26:   Returns how many lines left to read
        -:   27:*/
function _Z14pfd_read_firstRKSs called 5 returned 100% blocks executed 80%
        5:   28:int pfd_read_first (const string& s) {
        5:   29:    assert(!s.empty());
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
        -:   30:
        5:   31:    istringstream sin(s);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -:   32:    int i;
        -:   33:    int j;
        -:   34:
        5:   35:    sin >> i >> j;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
        5:   36:    tasks.resize(i + 1);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        5:   37:    tasks[0] = -1; //not using 0 slot
call    0 returned 100%
        -:   38:
      317:   39:    for(int k = 1; k < i+1; k++){
branch  0 taken 98%
branch  1 taken 2% (fallthrough)
      312:   40:        tasks[k] = 0;
call    0 returned 100%
        -:   41:    }
        -:   42:
        5:   43:    assert(j >= 0);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        5:   44:    return j;}
call    0 returned 100%
call    1 never executed
        -:   45:
        -:   46:// ------------
        -:   47:// pfd_read_rest
        -:   48:// ------------
        -:   49:/*  Takes in a string  of ints
        -:   50:    Returns a list of ints representing the string
        -:   51:*/
        -:   52:
function _Z13pfd_read_restRKSs called 8 returned 100% blocks executed 74%
        8:   53:list<int> pfd_read_rest (const string& s) {
        8:   54:    assert(!s.empty());
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
        -:   55:
        8:   56:    list<int> lst;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
       16:   57:    istringstream sin(s);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 never executed
call    5 never executed
        -:   58:    int tasknumber;
        -:   59:    int numdepend;
        -:   60:
        8:   61:    sin >> tasknumber >> numdepend;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
        8:   62:    lst.push_back(tasknumber);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        8:   63:    lst.push_back(numdepend);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -:   64:
       20:   65:    for(int i = 0; i < numdepend; ++i){
branch  0 taken 60%
branch  1 taken 40% (fallthrough)
        -:   66:        int j;
       12:   67:        sin >> j;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
       12:   68:        lst.push_back(j);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -:   69:    }
        8:   70:    assert(!lst.empty());
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
       16:   71:    return lst;}
        -:   72:
        -:   73:// ------------
        -:   74:// build_adj_list
        -:   75:// ------------
        -:   76:
        -:   77:/*  Takes in a list of ints
        -:   78:    Builds adjacency list so each node holds its successors
        -:   79:    Updates dependency vector with number of dependencies given
        -:   80:    returns number of lists updated
        -:   81:*/
function _Z14build_adj_listSt4listIiSaIiEE called 8 returned 100% blocks executed 91%
        8:   82:int build_adj_list (list<int> vals){
        8:   83:    assert(!vals.empty());
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
        8:   84:    int i = 0;
        8:   85:    list<int>::iterator p = vals.begin();
call    0 returned 100%
        -:   86:
        8:   87:    int task = *p;
call    0 returned 100%
        8:   88:    ++p;
call    0 returned 100%
        8:   89:    tasks[task] += *p;
call    0 returned 100%
call    1 returned 100%
        8:   90:    ++p;
call    0 returned 100%
        -:   91:
       28:   92:    while(p != vals.end()){
call    0 returned 100%
call    1 returned 100%
branch  2 taken 60%
branch  3 taken 40% (fallthrough)
       12:   93:        adjacency_list[*p].push_back(task);
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
       12:   94:        ++i;
       12:   95:        ++p;}
call    0 returned 100%
        8:   96:    assert(i >= 0);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        8:   97:    return i;}
        -:   98:
        -:   99:// ------------
        -:  100:// pfd_eval
        -:  101:// ------------
        -:  102:
        -:  103:/*  Checks the depency list for tasks that are no longer waiting
        -:  104:    Enqueues them in the priority queue
        -:  105:    Returns top of the queue or -1 if the queue is empty
        -:  106:*/
function _Z8pfd_evalv called 7 returned 100% blocks executed 91%
        7:  107:int pfd_eval (void) {
        7:  108:    assert(!tasks.empty());
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
       38:  109:    for(unsigned int i = 1; i < tasks.size(); ++i){
call    0 returned 100%
branch  1 taken 82%
branch  2 taken 18% (fallthrough)
       31:  110:        if (tasks[i] == 0){
call    0 returned 100%
branch  1 taken 19% (fallthrough)
branch  2 taken 81%
        6:  111:            pri_q.push(i);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        6:  112:            tasks[i] = -1;
call    0 returned 100%
        -:  113:        }
        -:  114:    }
        -:  115:
        7:  116:    if(!pri_q.empty()){
call    0 returned 100%
branch  1 taken 86% (fallthrough)
branch  2 taken 14%
        6:  117:        int q = pri_q.top();
call    0 returned 100%
        6:  118:        pri_q.pop();
call    0 returned 100%
        6:  119:        assert(q > 0);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        6:  120:        return q;}
        -:  121:    else{
        1:  122:        return -1;}}
        -:  123:
        -:  124:      
        -:  125:// -------------
        -:  126:// pfd_print
        -:  127:// -------------
        -:  128:
        -:  129:/*  Takes in a ostream and a list of ints
        -:  130:    Builds a string from the list
        -:  131:    Puts string in ostream
        -:  132:*/
        -:  133:
function _Z9pfd_printRSoSt4listIiSaIiEE called 5 returned 100% blocks executed 77%
        5:  134:void pfd_print (ostream& w, list<int> order) {
        5:  135:    assert(!order.empty());
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
        5:  136:    list<int>::iterator i = order.begin();
call    0 returned 100%
        5:  137:    list<int>::iterator e = order.end();
call    0 returned 100%
        5:  138:    string theString = "";
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
        -:  139:    
       30:  140:    while (i != e){
call    0 returned 100%
branch  1 taken 80%
branch  2 taken 20% (fallthrough)
       20:  141:        if ((next(i)) != e){
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 75% (fallthrough)
branch  5 taken 25%
       15:  142:            theString.append(to_string(*i).append(" "));}
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
call    7 returned 100%
branch  8 taken 100% (fallthrough)
branch  9 taken 0% (throw)
call   10 returned 100%
call   11 never executed
        -:  143:        else{
        5:  144:            theString.append(to_string(*i));}
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
call    7 returned 100%
call    8 never executed
       20:  145:        i++;
call    0 returned 100%
        -:  146:    }
        5:  147:    w  << theString.append("\n");}
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
call    7 never executed
call    8 never executed
        -:  148:
        -:  149:// ---------------
        -:  150:// pfd_update_tasks_list
        -:  151:// ---------------
        -:  152:
        -:  153:/*  Takes in an int representing the current node to work on
        -:  154:    Decrements any tasks that are dependent on this node
        -:  155:    Sets a node to -1 after it runs
        -:  156:    Returns the node worked on
        -:  157:    Returns -1 for unworkable node
        -:  158:*/
function _Z21pfd_update_tasks_listi called 9 returned 100% blocks executed 95%
        9:  159:int pfd_update_tasks_list(int node){
        9:  160:    if(node < 1 ||(unsigned) node > adjacency_list.size()){return -1;}
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
call    2 returned 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
branch  5 taken 11% (fallthrough)
branch  6 taken 89%
        -:  161:
        8:  162:    list<int>::iterator p = adjacency_list[node].begin();
call    0 returned 100%
call    1 returned 100%
        -:  163:    
       28:  164:    while (p != adjacency_list[node].end()){
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 60%
branch  4 taken 40% (fallthrough)
       12:  165:        tasks[*p] -= 1;
call    0 returned 100%
call    1 returned 100%
       12:  166:        ++p;
call    0 returned 100%
        -:  167:    }
        8:  168:    assert(node > 0);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        8:  169:    return node;}
        -:  170:
        -:  171:
        -:  172:// -------------
        -:  173:// pfd_solve
        -:  174:// -------------
        -:  175:
        -:  176:/*  Takes in an istream and an ostream
        -:  177:    istream represents lines of nodes and their dependencies
        -:  178:    ostream will contain executable order of nodes 
        -:  179:    such that no node runs before one it is dependent on
        -:  180:*/
function _Z9pfd_solveRSiRSo called 1 returned 100% blocks executed 75%
        1:  181:void pfd_solve (istream& r, ostream& w) {
        1:  182:    string s;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -:  183:
        1:  184:    getline(r,s);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        1:  185:    assert(!s.empty());
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
        -:  186:
        1:  187:    int remaining_lines = pfd_read_first(s);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        1:  188:    adjacency_list.resize(tasks.size());
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
        -:  189:
        1:  190:    assert(tasks.size() > 0);
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
        -:  191:
        6:  192:    while (remaining_lines > 0) {
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        4:  193:        getline(r, s);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        4:  194:        build_adj_list(pfd_read_rest(s));
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
call    7 never executed
        4:  195:        remaining_lines -= 1;}
        -:  196:
        1:  197:    assert(remaining_lines == 0);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:  198:
        2:  199:    list<int> order;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 never executed
        1:  200:    int k = (pfd_update_tasks_list(pfd_eval()));
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
        7:  201:    while(k != -1){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -:  202:        
        5:  203:        order.push_back(k);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        5:  204:        k =(pfd_update_tasks_list(pfd_eval()));
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
        -:  205:    }
function _GLOBAL__sub_I_tasks called 1 returned 100% blocks executed 100%
function _Z41__static_initialization_and_destruction_0ii called 1 returned 100% blocks executed 73%
        5:  206:    pfd_print(w, order);}
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
call    5 returned 100%
branch  6 taken 100% (fallthrough)
branch  7 taken 0% (throw)
call    8 returned 100%
branch  9 taken 100% (fallthrough)
branch 10 taken 0% (throw)
call   11 returned 100%
call   12 returned 100%
call   13 never executed
call   14 never executed
