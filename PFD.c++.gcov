        -:    0:Source:PFD.c++
        -:    0:Graph:PFD.gcno
        -:    0:Data:PFD.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:// --------
        -:    2:// includes
        -:    3:// --------
        -:    4:
        -:    5:#include <cassert>  // assert
        -:    6:#include <iostream> // endl, istream, ostream
        -:    7:#include <sstream>  // istringstream
        -:    8:#include <string>   // getline, string
        -:    9:#include <utility>  // make_pair, pair
        -:   10:#include <vector>   //resize
        -:   11:#include <list>
        -:   12:#include <queue>
        -:   13:#include "PFD.h"
        -:   14:
        -:   15:using namespace std;
        -:   16:
        1:   17:vector<int> tasks(12); //contains number of dependencies left for job i
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
call    5 returned 100%
call    6 never executed
call    7 never executed
        1:   18:vector<list<int>> adjacency_list = {{},{},{},{},{},{}};
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
call    7 returned 100%
branch  8 taken 100% (fallthrough)
branch  9 taken 0% (throw)
call   10 returned 100%
branch 11 taken 100% (fallthrough)
branch 12 taken 0% (throw)
call   13 returned 100%
branch 14 taken 100% (fallthrough)
branch 15 taken 0% (throw)
call   16 returned 100%
branch 17 taken 100% (fallthrough)
branch 18 taken 0% (throw)
call   19 returned 100%
branch 20 taken 100% (fallthrough)
branch 21 taken 0% (throw)
branch 22 taken 86% (fallthrough)
branch 23 taken 14%
call   24 returned 100%
call   25 returned 100%
call   26 returned 100%
branch 27 never executed
branch 28 never executed
call   29 never executed
call   30 never executed
call   31 never executed
        1:   19:priority_queue<int, vector<int>, greater<int>> pri_q;
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
call    5 returned 100%
call    6 never executed
        -:   20:// ------------
        -:   21:// pfd_read_first
        -:   22:// ------------
        -:   23:
function _Z14pfd_read_firstRKSs called 5 returned 100% blocks executed 87%
        5:   24:int pfd_read_first (const string& s) {
        5:   25:    istringstream sin(s);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -:   26:    int i;
        -:   27:    int j;
        5:   28:    sin >> i >> j;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
        5:   29:    tasks.resize(i + 1);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        5:   30:    tasks[0] = -1; //not using 0 slot
call    0 returned 100%
      317:   31:    for(int k = 1; k < i+1; k++){
branch  0 taken 98%
branch  1 taken 2% (fallthrough)
      312:   32:        tasks[k] = 0;
call    0 returned 100%
        -:   33:    }
        5:   34:    return j;}
call    0 returned 100%
call    1 never executed
        -:   35:
        -:   36:// ------------
        -:   37:// pfd_read_rest
        -:   38:// ------------
        -:   39:
function _Z13pfd_read_restRKSs called 8 returned 100% blocks executed 76%
        8:   40:list<int> pfd_read_rest (const string& s) {
        8:   41:    list<int> lst;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
       16:   42:    istringstream sin(s);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 never executed
call    5 never executed
        -:   43:    int tasknumber;
        -:   44:    int numdepend;
        8:   45:    sin >> tasknumber >> numdepend;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
        8:   46:    lst.push_back(tasknumber);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        8:   47:    lst.push_back(numdepend);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
       20:   48:    for(int i = 0; i < numdepend; ++i){
branch  0 taken 60%
branch  1 taken 40% (fallthrough)
        -:   49:        int j;
       12:   50:        sin >> j;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
       12:   51:        lst.push_back(j);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -:   52:    }
       16:   53:    return lst;}
        -:   54:
        -:   55:// ----------
        -:   56:// build_adj_list
        -:   57:// ------------
function _Z14build_adj_listSt4listIiSaIiEE called 8 returned 100% blocks executed 100%
        8:   58:int build_adj_list (list<int> vals){
        8:   59:    int i = 0;
        8:   60:    list<int>::iterator p = vals.begin();
call    0 returned 100%
        8:   61:    int task = *p;
call    0 returned 100%
        8:   62:    ++p;
call    0 returned 100%
        8:   63:    tasks[task] += *p;
call    0 returned 100%
call    1 returned 100%
        8:   64:    ++p;
call    0 returned 100%
       28:   65:    while(p != vals.end()){
call    0 returned 100%
call    1 returned 100%
branch  2 taken 60%
branch  3 taken 40% (fallthrough)
       12:   66:        adjacency_list[*p].push_back(task);
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
       12:   67:        ++i;
       12:   68:        ++p;}
call    0 returned 100%
        8:   69:        return i;}
        -:   70:
        -:   71:
        -:   72:
        -:   73:// ------------
        -:   74:// pfd_eval
        -:   75:// ------------
        -:   76:
function _Z8pfd_evalv called 7 returned 100% blocks executed 100%
        7:   77:int pfd_eval (void) {
        -:   78:    //check for tasks with no more dependencies, and push onto pq
       38:   79:    for(unsigned int i = 1; i < tasks.size(); ++i){
call    0 returned 100%
branch  1 taken 82%
branch  2 taken 18% (fallthrough)
       31:   80:        if (tasks[i] == 0){
call    0 returned 100%
branch  1 taken 19% (fallthrough)
branch  2 taken 81%
        6:   81:            pri_q.push(i);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        6:   82:            tasks[i] = -1;
call    0 returned 100%
        -:   83:        }
        -:   84:    }
        7:   85:    if(!pri_q.empty()){
call    0 returned 100%
branch  1 taken 86% (fallthrough)
branch  2 taken 14%
        6:   86:        int q = pri_q.top();
call    0 returned 100%
        6:   87:        pri_q.pop();
call    0 returned 100%
        6:   88:        return q;}
        -:   89:    else{
        1:   90:        return -1;}
        -:   91:}
        -:   92:
        -:   93:      
        -:   94:// -------------
        -:   95:// pfd_print
        -:   96:// -------------
        -:   97:
function _Z9pfd_printRSoSt4listIiSaIiEE called 5 returned 100% blocks executed 78%
        5:   98:void pfd_print (ostream& w, list<int> order) {
        5:   99:    list<int>::iterator i = order.begin();
call    0 returned 100%
        5:  100:    list<int>::iterator e = order.end();
call    0 returned 100%
        5:  101:    string theString = "";
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
        -:  102:    
       30:  103:    while (i != e){
call    0 returned 100%
branch  1 taken 80%
branch  2 taken 20% (fallthrough)
       20:  104:        if ((next(i)) != e){
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 75% (fallthrough)
branch  5 taken 25%
       15:  105:            theString.append(to_string(*i).append(" "));}
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
call    7 returned 100%
branch  8 taken 100% (fallthrough)
branch  9 taken 0% (throw)
call   10 returned 100%
call   11 never executed
        -:  106:        else{
        5:  107:            theString.append(to_string(*i));}
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
call    7 returned 100%
call    8 never executed
       20:  108:        i++;
call    0 returned 100%
        -:  109:    }
        5:  110:    w  << theString.append("\n");}
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
call    7 never executed
call    8 never executed
        -:  111:// ---------------
        -:  112:// pfd_update_tasks_list
        -:  113:// ---------------
        -:  114:
function _Z21pfd_update_tasks_listi called 7 returned 100% blocks executed 100%
        7:  115:int pfd_update_tasks_list(int node){
        7:  116:    if(node == -1 ){//|| adjacency_list[node].empty())
branch  0 taken 14% (fallthrough)
branch  1 taken 86%
        1:  117:        return -1;}
        6:  118:    list<int>::iterator p = adjacency_list[node].begin();
call    0 returned 100%
call    1 returned 100%
       20:  119:    while (p != adjacency_list[node].end()){
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 57%
branch  4 taken 43% (fallthrough)
        8:  120:        tasks[*p] -= 1;
call    0 returned 100%
call    1 returned 100%
        8:  121:        ++p;
call    0 returned 100%
        -:  122:    }
        6:  123:    return node;
        -:  124:}
        -:  125:
        -:  126:
        -:  127:// -------------
        -:  128:// pfd_solve
        -:  129:// -------------
        -:  130:
function _Z9pfd_solveRSiRSo called 1 returned 100% blocks executed 78%
        1:  131:void pfd_solve (istream& r, ostream& w) {
        1:  132:    string s;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        1:  133:    getline(r,s);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        1:  134:    int remaining_lines = pfd_read_first(s);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        1:  135:    adjacency_list.resize(tasks.size());
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
        -:  136:
        6:  137:    while (remaining_lines > 0) {
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        4:  138:        getline(r, s);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        4:  139:        build_adj_list(pfd_read_rest(s));
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
call    7 never executed
        4:  140:        remaining_lines -= 1;}
        -:  141:
        2:  142:    list<int> order;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 never executed
        1:  143:    int k = (pfd_update_tasks_list(pfd_eval()));
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
        7:  144:    while(k != -1){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -:  145:        
        5:  146:        order.push_back(k);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        5:  147:        k =(pfd_update_tasks_list(pfd_eval()));
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
        -:  148:    }
function _GLOBAL__sub_I_tasks called 1 returned 100% blocks executed 100%
function _Z41__static_initialization_and_destruction_0ii called 1 returned 100% blocks executed 73%
        5:  149:    pfd_print(w, order);}
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
call    5 returned 100%
branch  6 taken 100% (fallthrough)
branch  7 taken 0% (throw)
call    8 returned 100%
branch  9 taken 100% (fallthrough)
branch 10 taken 0% (throw)
call   11 returned 100%
call   12 returned 100%
call   13 never executed
call   14 never executed
